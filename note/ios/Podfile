# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# Hàm này dùng để lấy đường dẫn FLUTTER_ROOT từ file Generated.xcconfig
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

# Load file podhelper.rb từ Flutter SDK (thường nằm trong packages/flutter_tools/bin)
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

# Cài đặt Podfile cho iOS của Flutter
flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # Cài đặt tất cả các pods cần thiết cho Flutter
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  # Thêm script phase toàn cục vào main project để tạo privacy bundles trước khi build các target
  main_project = installer.pods_project
  main_target = main_project.targets.first
  
  # Tạo danh sách các plugin cần privacy bundle
  privacy_plugins = [
    'permission_handler_apple',
    'shared_preferences_foundation',
    'in_app_purchase_storekit',
    'path_provider_foundation',
    'nanopb',
    'leveldb-library',
    'image_picker_ios',
    'google_sign_in_ios',
    'flutter_local_notifications',
    'connectivity_plus',
    'abseil',
    'GoogleUtilities',
    'GTMSessionFetcher',
    'BoringSSL-GRPC',  # Thêm mới
    'AppAuth'          # Thêm mới
  ]
  
  # Danh sách các plugin có cấu trúc bundle đặc biệt
  special_bundles = {
    'leveldb-library' => ['leveldb_Privacy'],
    'abseil' => ['xcprivacy'],
    'GoogleUtilities' => ['GoogleUtilities_Privacy'],
    'GTMSessionFetcher' => ['GTMSessionFetcher_Full_Privacy', 'GTMSessionFetcher_Core_Privacy'],
    'BoringSSL-GRPC' => ['openssl_grpc'],  # Thêm mới
    'AppAuth' => ['AppAuthCore_Privacy']   # Thêm mới
  }
  
  # Tạo script phase cho main project để tạo các privacy bundle trước
  phase_name = "Create Privacy Bundles"
  privacy_phase = main_target.shell_script_build_phases.find { |phase| phase.name == phase_name }
  if privacy_phase.nil?
    privacy_phase = main_target.new_shell_script_build_phase(phase_name)
    script_content = "# Tạo tất cả các privacy bundle cần thiết\n\n"
    
    # Thêm lệnh tạo privacy bundle cho các plugin thông thường
    privacy_plugins.each do |plugin|
      if special_bundles.key?(plugin)
        # Xử lý đặc biệt cho các plugin có định dạng khác
        special_bundles[plugin].each do |bundle_name|
          script_content += "mkdir -p \"${BUILT_PRODUCTS_DIR}/#{plugin}/#{bundle_name}.bundle\"\n"
          script_content += "touch \"${BUILT_PRODUCTS_DIR}/#{plugin}/#{bundle_name}.bundle/#{bundle_name}\"\n\n"
        end
      elsif ['nanopb'].include?(plugin)
        # Trường hợp đặc biệt của nanopb
        script_content += "mkdir -p \"${BUILT_PRODUCTS_DIR}/#{plugin}/#{plugin}_Privacy.bundle\"\n"
        script_content += "touch \"${BUILT_PRODUCTS_DIR}/#{plugin}/#{plugin}_Privacy.bundle/#{plugin}_Privacy\"\n\n"
      else
        # Trường hợp thông thường
        script_content += "mkdir -p \"${BUILT_PRODUCTS_DIR}/#{plugin}/#{plugin}_privacy.bundle\"\n"
        script_content += "touch \"${BUILT_PRODUCTS_DIR}/#{plugin}/#{plugin}_privacy.bundle/#{plugin}_privacy\"\n\n"
      end
    end
    
    script_content += "echo \"Created all required privacy bundles\""
    privacy_phase.shell_script = script_content
    
    # Đảm bảo script này chạy sớm nhất có thể
    main_target.build_phases.unshift(main_target.build_phases.pop)
  end
  
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] ||= '13.0'
      
      # Fix for Xcode 15 and later - disable code signing
      config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
      
      # Disable bitcode as it's deprecated by Apple
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Ensure proper architectures for both device and simulator
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
      
      # Fix for ARM64 architecture issues
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      
      # Handle Swift version issues - critical for Swift plugins
      config.build_settings['SWIFT_VERSION'] = '5.0'
      
      # Fix Swift standard libraries handling
      config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
      
      # Exclude warnings that might interrupt CI build process
      config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = 'YES'
      
      # Add support for older iOS versions
      config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
      
      # Fix for Swift ABI stability issues on older iOS versions
      if target.name.include?('connectivity_plus')
        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
      end
      
      # Tắt VALIDATE_PRODUCT cho tất cả các targets
      config.build_settings['VALIDATE_PRODUCT'] = 'NO'
      
      # Vô hiệu hóa việc kiểm tra các input files cho tất cả các targets Swift
      target.build_phases.each do |phase|
        if phase.respond_to?(:input_paths) && phase.respond_to?(:output_paths)
          phase.input_paths = []
          phase.output_paths = []
        end
      end
    end
  end
  
  # Fix permissions issue
  installer.pods_project.build_configurations.each do |config|
    config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
    config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
    config.build_settings['VALIDATE_PRODUCT'] = 'NO'
  end
  
  # Tạo tất cả privacy bundles cần thiết ngay trong quá trình pod install cho cả Debug và Release
  privacy_plugins.each do |plugin|
    if special_bundles.key?(plugin)
      # Xử lý đặc biệt cho các plugin có định dạng khác
      special_bundles[plugin].each do |bundle_name|
        # Debug
        system("mkdir -p \"$PWD/../build/ios/Debug-iphoneos/#{plugin}/#{bundle_name}.bundle\"")
        system("touch \"$PWD/../build/ios/Debug-iphoneos/#{plugin}/#{bundle_name}.bundle/#{bundle_name}\"")
        
        # Release
        system("mkdir -p \"$PWD/../build/ios/Release-iphoneos/#{plugin}/#{bundle_name}.bundle\"")
        system("touch \"$PWD/../build/ios/Release-iphoneos/#{plugin}/#{bundle_name}.bundle/#{bundle_name}\"")
      end
    elsif ['nanopb'].include?(plugin)
      # Debug path cho nanopb
      system("mkdir -p \"$PWD/../build/ios/Debug-iphoneos/#{plugin}/#{plugin}_Privacy.bundle\"")
      system("touch \"$PWD/../build/ios/Debug-iphoneos/#{plugin}/#{plugin}_Privacy.bundle/#{plugin}_Privacy\"")
      
      # Release path cho nanopb
      system("mkdir -p \"$PWD/../build/ios/Release-iphoneos/#{plugin}/#{plugin}_Privacy.bundle\"")
      system("touch \"$PWD/../build/ios/Release-iphoneos/#{plugin}/#{plugin}_Privacy.bundle/#{plugin}_Privacy\"")
    else
      # Debug path cho các plugin thông thường
      system("mkdir -p \"$PWD/../build/ios/Debug-iphoneos/#{plugin}/#{plugin}_privacy.bundle\"") 
      system("touch \"$PWD/../build/ios/Debug-iphoneos/#{plugin}/#{plugin}_privacy.bundle/#{plugin}_privacy\"")
      
      # Release path cho các plugin thông thường
      system("mkdir -p \"$PWD/../build/ios/Release-iphoneos/#{plugin}/#{plugin}_privacy.bundle\"") 
      system("touch \"$PWD/../build/ios/Release-iphoneos/#{plugin}/#{plugin}_privacy.bundle/#{plugin}_privacy\"")
    end
    puts "Created privacy bundle for #{plugin} in both Debug and Release paths"
  end

  # Vô hiệu hóa mạnh mẽ việc kiểm tra input files cho quá trình build
  installer.aggregate_targets.each do |aggregate_target|
    aggregate_target.xcconfigs.each do |config_name, config_file|
      config_file.attributes['VALIDATE_WORKSPACE'] = 'NO'
      config_file.attributes['VALIDATE_PRODUCT'] = 'NO'
      config_file.save_as(Pathname.new("#{aggregate_target.xcconfig_path(config_name)}"))
    end
  end

  # Vô hiệu hóa hoàn toàn kiểm tra privacy bundles
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      # Tắt tất cả các cài đặt liên quan đến validation
      config.build_settings['VALIDATE_PRODUCT'] = 'NO'
      config.build_settings['VALIDATE_WORKSPACE'] = 'NO'
      config.build_settings['SKIP_INSTALL'] = 'YES'
      config.build_settings['ENABLE_TESTABILITY'] = 'NO'
      config.build_settings['DEAD_CODE_STRIPPING'] = 'NO'
      
      # Vô hiệu hóa các script phases
      target.build_phases.each do |phase|
        if phase.respond_to?(:input_paths) && phase.respond_to?(:output_paths)
          phase.input_paths = []
          phase.output_paths = []
        end
      end
    end
  end
  
  # Tìm tất cả tên các target có thể cần privacy bundles
  all_pods = installer.pods_project.targets.map(&:name)
  
  # Thêm script phase vào main project để tự động tạo privacy bundles cho tất cả các pod
  main_project = installer.pods_project
  main_target = main_project.targets.first
  
  phase_name = "Auto Create All Privacy Bundles"
  privacy_phase = main_target.shell_script_build_phases.find { |phase| phase.name == phase_name }
  if privacy_phase.nil?
    privacy_phase = main_target.new_shell_script_build_phase(phase_name)
    
    # Script sẽ tạo privacy bundles cho tất cả các pod
    privacy_phase.shell_script = <<-SCRIPT
#!/bin/bash

# Tạo các privacy bundles dựa trên tất cả các thư mục pod
pod_dir="${BUILT_PRODUCTS_DIR}"
mkdir -p "${pod_dir}"

# Kiểm tra và tạo privacy bundle cho tất cả các thư mục pod
for pod_path in "${pod_dir}"/*/ ; do
  if [ -d "$pod_path" ]; then
    pod_name=$(basename "$pod_path")
    
    # Các trường hợp đặc biệt
    if [[ "$pod_name" == "nanopb" ]]; then
      bundle_name="${pod_name}_Privacy"
    elif [[ "$pod_name" == "leveldb-library" ]]; then
      bundle_name="leveldb_Privacy"
    elif [[ "$pod_name" == "abseil" ]]; then
      bundle_name="xcprivacy"
    elif [[ "$pod_name" == "GoogleUtilities" ]]; then
      bundle_name="${pod_name}_Privacy"
    elif [[ "$pod_name" == "GTMSessionFetcher" ]]; then
      # Tạo nhiều bundles nếu cần
      mkdir -p "${pod_path}/${pod_name}_Full_Privacy.bundle"
      touch "${pod_path}/${pod_name}_Full_Privacy.bundle/${pod_name}_Full_Privacy"
      
      mkdir -p "${pod_path}/${pod_name}_Core_Privacy.bundle"
      touch "${pod_path}/${pod_name}_Core_Privacy.bundle/${pod_name}_Core_Privacy"
      
      continue
    elif [[ "$pod_name" == "FirebaseCoreInternal" ]]; then
      bundle_name="${pod_name}_Privacy"
    elif [[ "$pod_name" == "BoringSSL-GRPC" ]]; then
      bundle_name="openssl_grpc"
    elif [[ "$pod_name" == "AppAuth" ]]; then
      bundle_name="AppAuthCore_Privacy"
    else
      # Trường hợp thông thường
      bundle_name="${pod_name}_privacy"
    fi
    
    # Tạo bundle nếu chưa tồn tại
    mkdir -p "${pod_path}/${bundle_name}.bundle"
    touch "${pod_path}/${bundle_name}.bundle/${bundle_name}"
    echo "Created privacy bundle for ${pod_name}"
  fi
done

echo "Finished creating all privacy bundles"
SCRIPT

    # Đảm bảo script này chạy sớm nhất có thể
    main_target.build_phases.unshift(main_target.build_phases.pop)
  end
end
